/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CrossChainGateway {
  export type CrossChainTransferStruct = {
    user: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    sourceChainId: BigNumberish;
    targetChainId: BigNumberish;
    targetUser: AddressLike;
    timestamp: BigNumberish;
    executed: boolean;
    proofHash: BytesLike;
  };

  export type CrossChainTransferStructOutput = [
    user: string,
    token: string,
    amount: bigint,
    sourceChainId: bigint,
    targetChainId: bigint,
    targetUser: string,
    timestamp: bigint,
    executed: boolean,
    proofHash: string
  ] & {
    user: string;
    token: string;
    amount: bigint;
    sourceChainId: bigint;
    targetChainId: bigint;
    targetUser: string;
    timestamp: bigint;
    executed: boolean;
    proofHash: string;
  };
}

export interface CrossChainGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_CHAINS"
      | "addSupportedChain"
      | "cancelCrossChainTransfer"
      | "chainGateways"
      | "emergencyWithdraw"
      | "executeCrossChainTransfer"
      | "getMappedToken"
      | "getPendingTransfer"
      | "initiateCrossChainTransfer"
      | "isTransferValid"
      | "owner"
      | "pendingTransfers"
      | "removeSupportedChain"
      | "renounceOwnership"
      | "setTokenMapping"
      | "setTokenSupport"
      | "setTransferTimeout"
      | "supportedChains"
      | "supportedTokens"
      | "tokenMappings"
      | "transferOwnership"
      | "transferTimeout"
      | "usedNonces"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChainSupported"
      | "ChainUnsupported"
      | "CrossChainTransferExecuted"
      | "CrossChainTransferFailed"
      | "CrossChainTransferInitiated"
      | "OwnershipTransferred"
      | "TokenMappingUpdated"
      | "TokenSupported"
      | "TransferTimeoutUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_CHAINS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedChain",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCrossChainTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "chainGateways",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCrossChainTransfer",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMappedToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateCrossChainTransfer",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTransfers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMapping",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenSupport",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMappings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usedNonces",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_CHAINS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCrossChainTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainGateways",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCrossChainTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateCrossChainTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMappings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedNonces", data: BytesLike): Result;
}

export namespace ChainSupportedEvent {
  export type InputTuple = [chainId: BigNumberish, gateway: AddressLike];
  export type OutputTuple = [chainId: bigint, gateway: string];
  export interface OutputObject {
    chainId: bigint;
    gateway: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainUnsupportedEvent {
  export type InputTuple = [chainId: BigNumberish];
  export type OutputTuple = [chainId: bigint];
  export interface OutputObject {
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainTransferExecutedEvent {
  export type InputTuple = [
    transferId: BytesLike,
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    sourceChainId: BigNumberish,
    targetChainId: BigNumberish
  ];
  export type OutputTuple = [
    transferId: string,
    user: string,
    token: string,
    amount: bigint,
    sourceChainId: bigint,
    targetChainId: bigint
  ];
  export interface OutputObject {
    transferId: string;
    user: string;
    token: string;
    amount: bigint;
    sourceChainId: bigint;
    targetChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainTransferFailedEvent {
  export type InputTuple = [transferId: BytesLike, reason: string];
  export type OutputTuple = [transferId: string, reason: string];
  export interface OutputObject {
    transferId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainTransferInitiatedEvent {
  export type InputTuple = [
    transferId: BytesLike,
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    sourceChainId: BigNumberish,
    targetChainId: BigNumberish,
    targetUser: AddressLike
  ];
  export type OutputTuple = [
    transferId: string,
    user: string,
    token: string,
    amount: bigint,
    sourceChainId: bigint,
    targetChainId: bigint,
    targetUser: string
  ];
  export interface OutputObject {
    transferId: string;
    user: string;
    token: string;
    amount: bigint;
    sourceChainId: bigint;
    targetChainId: bigint;
    targetUser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMappingUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    chainId: BigNumberish,
    mappedToken: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    chainId: bigint,
    mappedToken: string
  ];
  export interface OutputObject {
    token: string;
    chainId: bigint;
    mappedToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSupportedEvent {
  export type InputTuple = [token: AddressLike, supported: boolean];
  export type OutputTuple = [token: string, supported: boolean];
  export interface OutputObject {
    token: string;
    supported: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferTimeoutUpdatedEvent {
  export type InputTuple = [newTimeout: BigNumberish];
  export type OutputTuple = [newTimeout: bigint];
  export interface OutputObject {
    newTimeout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrossChainGateway extends BaseContract {
  connect(runner?: ContractRunner | null): CrossChainGateway;
  waitForDeployment(): Promise<this>;

  interface: CrossChainGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_CHAINS: TypedContractMethod<[], [bigint], "view">;

  addSupportedChain: TypedContractMethod<
    [chainId: BigNumberish, gatewayAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelCrossChainTransfer: TypedContractMethod<
    [transferId: BytesLike],
    [void],
    "nonpayable"
  >;

  chainGateways: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeCrossChainTransfer: TypedContractMethod<
    [transferId: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  getMappedToken: TypedContractMethod<
    [token: AddressLike, chainId: BigNumberish],
    [string],
    "view"
  >;

  getPendingTransfer: TypedContractMethod<
    [transferId: BytesLike],
    [CrossChainGateway.CrossChainTransferStructOutput],
    "view"
  >;

  initiateCrossChainTransfer: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetChainId: BigNumberish,
      targetUser: AddressLike,
      proofHash: BytesLike
    ],
    [string],
    "payable"
  >;

  isTransferValid: TypedContractMethod<
    [transferId: BytesLike],
    [[boolean, boolean] & { valid: boolean; expired: boolean }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingTransfers: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean,
        string
      ] & {
        user: string;
        token: string;
        amount: bigint;
        sourceChainId: bigint;
        targetChainId: bigint;
        targetUser: string;
        timestamp: bigint;
        executed: boolean;
        proofHash: string;
      }
    ],
    "view"
  >;

  removeSupportedChain: TypedContractMethod<
    [chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTokenMapping: TypedContractMethod<
    [token: AddressLike, chainId: BigNumberish, mappedToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenSupport: TypedContractMethod<
    [token: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;

  setTransferTimeout: TypedContractMethod<
    [newTimeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportedChains: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  tokenMappings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferTimeout: TypedContractMethod<[], [bigint], "view">;

  usedNonces: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_CHAINS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addSupportedChain"
  ): TypedContractMethod<
    [chainId: BigNumberish, gatewayAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelCrossChainTransfer"
  ): TypedContractMethod<[transferId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chainGateways"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeCrossChainTransfer"
  ): TypedContractMethod<
    [transferId: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMappedToken"
  ): TypedContractMethod<
    [token: AddressLike, chainId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingTransfer"
  ): TypedContractMethod<
    [transferId: BytesLike],
    [CrossChainGateway.CrossChainTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateCrossChainTransfer"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetChainId: BigNumberish,
      targetUser: AddressLike,
      proofHash: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "isTransferValid"
  ): TypedContractMethod<
    [transferId: BytesLike],
    [[boolean, boolean] & { valid: boolean; expired: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingTransfers"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean,
        string
      ] & {
        user: string;
        token: string;
        amount: bigint;
        sourceChainId: bigint;
        targetChainId: bigint;
        targetUser: string;
        timestamp: bigint;
        executed: boolean;
        proofHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeSupportedChain"
  ): TypedContractMethod<[chainId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenMapping"
  ): TypedContractMethod<
    [token: AddressLike, chainId: BigNumberish, mappedToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenSupport"
  ): TypedContractMethod<
    [token: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransferTimeout"
  ): TypedContractMethod<[newTimeout: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedChains"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenMappings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferTimeout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usedNonces"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getEvent(
    key: "ChainSupported"
  ): TypedContractEvent<
    ChainSupportedEvent.InputTuple,
    ChainSupportedEvent.OutputTuple,
    ChainSupportedEvent.OutputObject
  >;
  getEvent(
    key: "ChainUnsupported"
  ): TypedContractEvent<
    ChainUnsupportedEvent.InputTuple,
    ChainUnsupportedEvent.OutputTuple,
    ChainUnsupportedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainTransferExecuted"
  ): TypedContractEvent<
    CrossChainTransferExecutedEvent.InputTuple,
    CrossChainTransferExecutedEvent.OutputTuple,
    CrossChainTransferExecutedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainTransferFailed"
  ): TypedContractEvent<
    CrossChainTransferFailedEvent.InputTuple,
    CrossChainTransferFailedEvent.OutputTuple,
    CrossChainTransferFailedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainTransferInitiated"
  ): TypedContractEvent<
    CrossChainTransferInitiatedEvent.InputTuple,
    CrossChainTransferInitiatedEvent.OutputTuple,
    CrossChainTransferInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenMappingUpdated"
  ): TypedContractEvent<
    TokenMappingUpdatedEvent.InputTuple,
    TokenMappingUpdatedEvent.OutputTuple,
    TokenMappingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSupported"
  ): TypedContractEvent<
    TokenSupportedEvent.InputTuple,
    TokenSupportedEvent.OutputTuple,
    TokenSupportedEvent.OutputObject
  >;
  getEvent(
    key: "TransferTimeoutUpdated"
  ): TypedContractEvent<
    TransferTimeoutUpdatedEvent.InputTuple,
    TransferTimeoutUpdatedEvent.OutputTuple,
    TransferTimeoutUpdatedEvent.OutputObject
  >;

  filters: {
    "ChainSupported(uint256,address)": TypedContractEvent<
      ChainSupportedEvent.InputTuple,
      ChainSupportedEvent.OutputTuple,
      ChainSupportedEvent.OutputObject
    >;
    ChainSupported: TypedContractEvent<
      ChainSupportedEvent.InputTuple,
      ChainSupportedEvent.OutputTuple,
      ChainSupportedEvent.OutputObject
    >;

    "ChainUnsupported(uint256)": TypedContractEvent<
      ChainUnsupportedEvent.InputTuple,
      ChainUnsupportedEvent.OutputTuple,
      ChainUnsupportedEvent.OutputObject
    >;
    ChainUnsupported: TypedContractEvent<
      ChainUnsupportedEvent.InputTuple,
      ChainUnsupportedEvent.OutputTuple,
      ChainUnsupportedEvent.OutputObject
    >;

    "CrossChainTransferExecuted(bytes32,address,address,uint256,uint256,uint256)": TypedContractEvent<
      CrossChainTransferExecutedEvent.InputTuple,
      CrossChainTransferExecutedEvent.OutputTuple,
      CrossChainTransferExecutedEvent.OutputObject
    >;
    CrossChainTransferExecuted: TypedContractEvent<
      CrossChainTransferExecutedEvent.InputTuple,
      CrossChainTransferExecutedEvent.OutputTuple,
      CrossChainTransferExecutedEvent.OutputObject
    >;

    "CrossChainTransferFailed(bytes32,string)": TypedContractEvent<
      CrossChainTransferFailedEvent.InputTuple,
      CrossChainTransferFailedEvent.OutputTuple,
      CrossChainTransferFailedEvent.OutputObject
    >;
    CrossChainTransferFailed: TypedContractEvent<
      CrossChainTransferFailedEvent.InputTuple,
      CrossChainTransferFailedEvent.OutputTuple,
      CrossChainTransferFailedEvent.OutputObject
    >;

    "CrossChainTransferInitiated(bytes32,address,address,uint256,uint256,uint256,address)": TypedContractEvent<
      CrossChainTransferInitiatedEvent.InputTuple,
      CrossChainTransferInitiatedEvent.OutputTuple,
      CrossChainTransferInitiatedEvent.OutputObject
    >;
    CrossChainTransferInitiated: TypedContractEvent<
      CrossChainTransferInitiatedEvent.InputTuple,
      CrossChainTransferInitiatedEvent.OutputTuple,
      CrossChainTransferInitiatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenMappingUpdated(address,uint256,address)": TypedContractEvent<
      TokenMappingUpdatedEvent.InputTuple,
      TokenMappingUpdatedEvent.OutputTuple,
      TokenMappingUpdatedEvent.OutputObject
    >;
    TokenMappingUpdated: TypedContractEvent<
      TokenMappingUpdatedEvent.InputTuple,
      TokenMappingUpdatedEvent.OutputTuple,
      TokenMappingUpdatedEvent.OutputObject
    >;

    "TokenSupported(address,bool)": TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;
    TokenSupported: TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;

    "TransferTimeoutUpdated(uint256)": TypedContractEvent<
      TransferTimeoutUpdatedEvent.InputTuple,
      TransferTimeoutUpdatedEvent.OutputTuple,
      TransferTimeoutUpdatedEvent.OutputObject
    >;
    TransferTimeoutUpdated: TypedContractEvent<
      TransferTimeoutUpdatedEvent.InputTuple,
      TransferTimeoutUpdatedEvent.OutputTuple,
      TransferTimeoutUpdatedEvent.OutputObject
    >;
  };
}
