"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/circom_runtime";
exports.ids = ["vendor-chunks/circom_runtime"];
exports.modules = {

/***/ "(ssr)/./node_modules/circom_runtime/js/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/circom_runtime/js/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flatArray: () => (/* binding */ flatArray),\n/* harmony export */   fnvHash: () => (/* binding */ fnvHash),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   toArray32: () => (/* binding */ toArray32)\n/* harmony export */ });\n/*\n\nCopyright 2020 0KIMS association.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nfunction flatArray(a) {\n    let res = [];\n    fillArray(res, a);\n    return res;\n\n    function fillArray(res, a) {\n        if (Array.isArray(a)) {\n            for (let i = 0; i < a.length; i++) {\n                fillArray(res, a[i]);\n            }\n        } else {\n            res.push(a);\n        }\n    }\n}\n\n// Ref https://github.com/iden3/circom/commit/ec6388cf6eb62463539cb4c40cc3ceae9826de19\nfunction normalize(n, prime) {\n    let res = BigInt(n) % prime;\n    if (res < 0) res += prime;\n    return res;\n}\n\nfunction fnvHash(str) {\n    const uint64_max = BigInt(2) ** BigInt(64);\n    let hash = BigInt(\"0xCBF29CE484222325\");\n    for (let i = 0; i < str.length; i++) {\n        hash ^= BigInt(str[i].charCodeAt(0));\n        hash *= BigInt(0x100000001B3);\n        hash %= uint64_max;\n    }\n    let shash = hash.toString(16);\n    let n = 16 - shash.length;\n    shash = \"0\".repeat(n).concat(shash);\n    return shash;\n}\n\n// Note that this pads zeros\nfunction toArray32(s, size) {\n    const res = []; //new Uint32Array(size); //has no unshift\n    let rem = BigInt(s);\n    const radix = BigInt(0x100000000);\n    while (rem) {\n        res.unshift(Number(rem % radix));\n        rem = rem / radix;\n    }\n    if (size) {\n        let i = size - res.length;\n        while (i > 0) {\n            res.unshift(0);\n            i--;\n        }\n    }\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lyY29tX3J1bnRpbWUvanMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNPO0FBQ1Asb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2NpcmNvbV9ydW50aW1lL2pzL3V0aWxzLmpzPzJiYzkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblxuQ29weXJpZ2h0IDIwMjAgMEtJTVMgYXNzb2NpYXRpb24uXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4qL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxhdEFycmF5KGEpIHtcbiAgICBsZXQgcmVzID0gW107XG4gICAgZmlsbEFycmF5KHJlcywgYSk7XG4gICAgcmV0dXJuIHJlcztcblxuICAgIGZ1bmN0aW9uIGZpbGxBcnJheShyZXMsIGEpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZpbGxBcnJheShyZXMsIGFbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzLnB1c2goYSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIFJlZiBodHRwczovL2dpdGh1Yi5jb20vaWRlbjMvY2lyY29tL2NvbW1pdC9lYzYzODhjZjZlYjYyNDYzNTM5Y2I0YzQwY2MzY2VhZTk4MjZkZTE5XG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG4sIHByaW1lKSB7XG4gICAgbGV0IHJlcyA9IEJpZ0ludChuKSAlIHByaW1lO1xuICAgIGlmIChyZXMgPCAwKSByZXMgKz0gcHJpbWU7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZudkhhc2goc3RyKSB7XG4gICAgY29uc3QgdWludDY0X21heCA9IEJpZ0ludCgyKSAqKiBCaWdJbnQoNjQpO1xuICAgIGxldCBoYXNoID0gQmlnSW50KFwiMHhDQkYyOUNFNDg0MjIyMzI1XCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhhc2ggXj0gQmlnSW50KHN0cltpXS5jaGFyQ29kZUF0KDApKTtcbiAgICAgICAgaGFzaCAqPSBCaWdJbnQoMHgxMDAwMDAwMDFCMyk7XG4gICAgICAgIGhhc2ggJT0gdWludDY0X21heDtcbiAgICB9XG4gICAgbGV0IHNoYXNoID0gaGFzaC50b1N0cmluZygxNik7XG4gICAgbGV0IG4gPSAxNiAtIHNoYXNoLmxlbmd0aDtcbiAgICBzaGFzaCA9IFwiMFwiLnJlcGVhdChuKS5jb25jYXQoc2hhc2gpO1xuICAgIHJldHVybiBzaGFzaDtcbn1cblxuLy8gTm90ZSB0aGF0IHRoaXMgcGFkcyB6ZXJvc1xuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXkzMihzLCBzaXplKSB7XG4gICAgY29uc3QgcmVzID0gW107IC8vbmV3IFVpbnQzMkFycmF5KHNpemUpOyAvL2hhcyBubyB1bnNoaWZ0XG4gICAgbGV0IHJlbSA9IEJpZ0ludChzKTtcbiAgICBjb25zdCByYWRpeCA9IEJpZ0ludCgweDEwMDAwMDAwMCk7XG4gICAgd2hpbGUgKHJlbSkge1xuICAgICAgICByZXMudW5zaGlmdChOdW1iZXIocmVtICUgcmFkaXgpKTtcbiAgICAgICAgcmVtID0gcmVtIC8gcmFkaXg7XG4gICAgfVxuICAgIGlmIChzaXplKSB7XG4gICAgICAgIGxldCBpID0gc2l6ZSAtIHJlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpID4gMCkge1xuICAgICAgICAgICAgcmVzLnVuc2hpZnQoMCk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/circom_runtime/js/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/circom_runtime/js/witness_calculator.js":
/*!**************************************************************!*\
  !*** ./node_modules/circom_runtime/js/witness_calculator.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ builder)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/circom_runtime/js/utils.js\");\n/* harmony import */ var ffjavascript__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ffjavascript */ \"(ssr)/./node_modules/ffjavascript/main.js\");\n/* globals WebAssembly */\n/*\n\nCopyright 2020 0KIMS association.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\n\n\n\nasync function builder(code, options) {\n    let instance;\n    let wc;\n    let memory;\n    options = options || {};\n\n    // Only circom 2 implements version lookup through exports in the WASM\n    // We default to `1` and update if we see the `getVersion` export (major version)\n    // These are updated after the instance is instantiated, assuming the functions are available\n    let majorVersion = 1;\n    // After Circom 2.0.7, Blaine added exported functions for getting minor and patch versions\n    let minorVersion = 0;\n    // If we can't look up the patch version, assume the lowest\n    let patchVersion = 0;\n\n    let codeIsWebAssemblyInstance = false;\n\n    // If code is already prepared WebAssembly.Instance, we use it directly\n    if (code instanceof WebAssembly.Instance) {\n        instance = code;\n        codeIsWebAssemblyInstance = true;\n    } else {\n        let memorySize = 32767;\n\n        if (options.memorySize) {\n            // make sure we have int\n            memorySize = parseInt(options.memorySize);\n            if (memorySize < 0) {\n                throw new Error(\"Invalid memory size\");\n            }\n        }\n\n        let memoryAllocated = false;\n        while (!memoryAllocated) {\n            try {\n                memory = new WebAssembly.Memory({initial: memorySize});\n                memoryAllocated = true;\n            } catch (err) {\n                if (memorySize <= 1) {\n                    throw err;\n                }\n                console.warn(\"Could not allocate \" + memorySize * 1024 * 64 + \" bytes. This may cause severe instability. Trying with \" + memorySize * 1024 * 64 / 2 + \" bytes\");\n                memorySize = Math.floor(memorySize / 2);\n            }\n        }\n\n        const wasmModule = await WebAssembly.compile(code);\n\n        let errStr = \"\";\n        let msgStr = \"\";\n\n        instance = await WebAssembly.instantiate(wasmModule, {\n            env: {\n                \"memory\": memory\n            },\n            runtime: {\n                printDebug : function(value) {\n                    console.log(\"printDebug:\", value);\n                },\n                exceptionHandler: function (code) {\n                    let err;\n                    if (code === 1) {\n                        err = \"Signal not found. \";\n                    } else if (code === 2) {\n                        err = \"Too many signals set. \";\n                    } else if (code === 3) {\n                        err = \"Signal already set. \";\n                    } else if (code === 4) {\n                        err = \"Assert Failed. \";\n                    } else if (code === 5) {\n                        err = \"Not enough memory. \";\n                    } else if (code === 6) {\n                        err = \"Input signal array access exceeds the size. \";\n                    } else {\n                        err = \"Unknown error. \";\n                    }\n                    console.error(\"ERROR: \", code, errStr);\n                    throw new Error(err + errStr);\n                },\n                // A new way of logging messages was added in Circom 2.0.7 that requires 2 new imports\n                // `printErrorMessage` and `writeBufferMessage`.\n                printErrorMessage: function () {\n                    errStr += getMessage() + \"\\n\";\n                },\n                writeBufferMessage: function () {\n                    const msg = getMessage();\n                    // Any calls to `log()` will always end with a `\\n`, so that's when we print and reset\n                    if (msg === \"\\n\") {\n                        console.log(msgStr);\n                        msgStr = \"\";\n                    } else {\n                        // If we've buffered other content, put a space in between the items\n                        if (msgStr !== \"\") {\n                            msgStr += \" \";\n                        }\n                        // Then append the message to the message we are creating\n                        msgStr += msg;\n                    }\n                },\n                showSharedRWMemory: function () {\n                    const shared_rw_memory_size = instance.exports.getFieldNumLen32();\n                    const arr = new Uint32Array(shared_rw_memory_size);\n                    for (let j = 0; j < shared_rw_memory_size; j++) {\n                        arr[shared_rw_memory_size - 1 - j] = instance.exports.readSharedRWMemory(j);\n                    }\n\n                    // In circom 2.0.7, they changed the log() function to allow strings and changed the\n                    // output API. This smoothes over the breaking change.\n                    if (majorVersion >= 2 && (minorVersion >= 1 || patchVersion >= 7)) {\n                        // If we've buffered other content, put a space in between the items\n                        if (msgStr !== \"\") {\n                            msgStr += \" \";\n                        }\n                        // Then append the value to the message we are creating\n                        const msg = (ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromArray(arr, 0x100000000).toString());\n                        msgStr += msg;\n                    } else {\n                        console.log(ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromArray(arr, 0x100000000));\n                    }\n                },\n                error: function (code, pstr, a, b, c, d) {\n                    let errStr;\n                    if (code === 7) {\n                        errStr = p2str(pstr) + \" \" + wc.getFr(b).toString() + \" != \" + wc.getFr(c).toString() + \" \" + p2str(d);\n                    } else if (code === 9) {\n                        errStr = p2str(pstr) + \" \" + wc.getFr(b).toString() + \" \" + p2str(c);\n                    } else if ((code === 5) && (options.sym)) {\n                        errStr = p2str(pstr) + \" \" + options.sym.labelIdx2Name[c];\n                    } else {\n                        errStr = p2str(pstr) + \" \" + a + \" \" + b + \" \" + c + \" \" + d;\n                    }\n                    console.log(\"ERROR: \", code, errStr);\n                    throw new Error(errStr);\n                },\n                log: function (a) {\n                    console.log(wc.getFr(a).toString());\n                },\n                logGetSignal: function (signal, pVal) {\n                    if (options.logGetSignal) {\n                        options.logGetSignal(signal, wc.getFr(pVal));\n                    }\n                },\n                logSetSignal: function (signal, pVal) {\n                    if (options.logSetSignal) {\n                        options.logSetSignal(signal, wc.getFr(pVal));\n                    }\n                },\n                logStartComponent: function (cIdx) {\n                    if (options.logStartComponent) {\n                        options.logStartComponent(cIdx);\n                    }\n                },\n                logFinishComponent: function (cIdx) {\n                    if (options.logFinishComponent) {\n                        options.logFinishComponent(cIdx);\n                    }\n                }\n            }\n        });\n    }\n\n    if (typeof instance.exports.getVersion == \"function\") {\n        majorVersion = instance.exports.getVersion();\n    }\n    if (typeof instance.exports.getMinorVersion == \"function\") {\n        minorVersion = instance.exports.getMinorVersion();\n    }\n    if (typeof instance.exports.getPatchVersion == \"function\") {\n        patchVersion = instance.exports.getPatchVersion();\n    }\n\n    const sanityCheck =\n        options &&\n        (\n            options.sanityCheck ||\n            options.logGetSignal ||\n            options.logSetSignal ||\n            options.logStartComponent ||\n            options.logFinishComponent\n        );\n\n    // We explicitly check for major version 2 in case there's a circom v3 in the future\n    if (majorVersion === 2) {\n        wc = new WitnessCalculatorCircom2(instance, sanityCheck);\n    } else if (majorVersion === 1) {\n        if (codeIsWebAssemblyInstance) {\n            throw new Error('Loading code from WebAssembly instance is not supported for circom version 1');\n        }\n        wc = new WitnessCalculatorCircom1(memory, instance, sanityCheck);\n    } else {\n        throw new Error(`Unsupported circom version: ${majorVersion}`);\n    }\n    return wc;\n\n    function getMessage() {\n        let message = \"\";\n        let c = instance.exports.getMessageChar();\n        while (c !== 0) {\n            message += String.fromCharCode(c);\n            c = instance.exports.getMessageChar();\n        }\n        return message;\n    }\n\n    function p2str(p) {\n        const i8 = new Uint8Array(memory.buffer);\n\n        const bytes = [];\n\n        for (let i = 0; i8[p + i] > 0; i++) bytes.push(i8[p + i]);\n\n        return String.fromCharCode.apply(null, bytes);\n    }\n}\n\nclass WitnessCalculatorCircom1 {\n    constructor(memory, instance, sanityCheck) {\n        this.memory = memory;\n        this.i32 = new Uint32Array(memory.buffer);\n        this.instance = instance;\n\n        this.n32 = (this.instance.exports.getFrLen() >> 2) - 2;\n        const pRawPrime = this.instance.exports.getPRawPrime();\n\n        const arr = new Array(this.n32);\n        for (let i = 0; i < this.n32; i++) {\n            arr[this.n32 - 1 - i] = this.i32[(pRawPrime >> 2) + i];\n        }\n\n        this.prime = ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromArray(arr, 0x100000000);\n\n        this.Fr = new ffjavascript__WEBPACK_IMPORTED_MODULE_1__.F1Field(this.prime);\n\n        this.mask32 = ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromString(\"FFFFFFFF\", 16);\n        this.NVars = this.instance.exports.getNVars();\n        this.n64 = Math.floor((this.Fr.bitLength - 1) / 64) + 1;\n        this.R = this.Fr.e(ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.shiftLeft(1, this.n64 * 64));\n        this.RInv = this.Fr.inv(this.R);\n        this.sanityCheck = sanityCheck;\n    }\n\n    circom_version() {\n        return 1;\n    }\n\n    async _doCalculateWitness(input, sanityCheck) {\n        this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);\n        const pSigOffset = this.allocInt();\n        const pFr = this.allocFr();\n        const keys = Object.keys(input);\n        keys.forEach((k) => {\n            const h = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.fnvHash)(k);\n            const hMSB = parseInt(h.slice(0, 8), 16);\n            const hLSB = parseInt(h.slice(8, 16), 16);\n            try {\n                this.instance.exports.getSignalOffset32(pSigOffset, 0, hMSB, hLSB);\n            } catch (err) {\n                throw new Error(`Signal ${k} is not an input of the circuit.`);\n            }\n            const sigOffset = this.getInt(pSigOffset);\n            const fArr = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatArray)(input[k]);\n            for (let i = 0; i < fArr.length; i++) {\n                this.setFr(pFr, fArr[i]);\n                this.instance.exports.setSignal(0, 0, sigOffset + i, pFr);\n            }\n        });\n    }\n\n    async calculateWitness(input, sanityCheck) {\n        const self = this;\n\n        const old0 = self.i32[0];\n        const w = [];\n\n        await self._doCalculateWitness(input, sanityCheck);\n\n        for (let i = 0; i < self.NVars; i++) {\n            const pWitness = self.instance.exports.getPWitness(i);\n            w.push(self.getFr(pWitness));\n        }\n\n        self.i32[0] = old0;\n        return w;\n    }\n\n    async calculateBinWitness(input, sanityCheck) {\n        const self = this;\n\n        const old0 = self.i32[0];\n\n        await self._doCalculateWitness(input, sanityCheck);\n\n        const pWitnessBuffer = self.instance.exports.getWitnessBuffer();\n\n        self.i32[0] = old0;\n\n        const buff = self.memory.buffer.slice(pWitnessBuffer, pWitnessBuffer + (self.NVars * self.n64 * 8));\n        return new Uint8Array(buff);\n    }\n\n    allocInt() {\n        const p = this.i32[0];\n        this.i32[0] = p + 8;\n        return p;\n    }\n\n    allocFr() {\n        const p = this.i32[0];\n        this.i32[0] = p + this.n32 * 4 + 8;\n        return p;\n    }\n\n    getInt(p) {\n        return this.i32[p >> 2];\n    }\n\n    setInt(p, v) {\n        this.i32[p >> 2] = v;\n    }\n\n    getFr(p) {\n        const self = this;\n        const idx = (p >> 2);\n\n        if (self.i32[idx + 1] & 0x80000000) {\n            const arr = new Array(self.n32);\n            for (let i = 0; i < self.n32; i++) {\n                arr[self.n32 - 1 - i] = self.i32[idx + 2 + i];\n            }\n            const res = self.Fr.e(ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromArray(arr, 0x100000000));\n            if (self.i32[idx + 1] & 0x40000000) {\n                return fromMontgomery(res);\n            } else {\n                return res;\n            }\n\n        } else {\n            if (self.i32[idx] & 0x80000000) {\n                return self.Fr.e(self.i32[idx] - 0x100000000);\n            } else {\n                return self.Fr.e(self.i32[idx]);\n            }\n        }\n\n        function fromMontgomery(n) {\n            return self.Fr.mul(self.RInv, n);\n        }\n\n    }\n\n\n    setFr(p, v) {\n        const self = this;\n\n        v = self.Fr.e(v);\n\n        const minShort = self.Fr.neg(self.Fr.e(\"80000000\", 16));\n        const maxShort = self.Fr.e(\"7FFFFFFF\", 16);\n\n        if ((self.Fr.geq(v, minShort))\n            && (self.Fr.leq(v, maxShort))) {\n            let a;\n            if (self.Fr.geq(v, self.Fr.zero)) {\n                a = ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.toNumber(v);\n            } else {\n                a = ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.toNumber(self.Fr.sub(v, minShort));\n                a = a - 0x80000000;\n                a = 0x100000000 + a;\n            }\n            self.i32[(p >> 2)] = a;\n            self.i32[(p >> 2) + 1] = 0;\n            return;\n        }\n\n        self.i32[(p >> 2)] = 0;\n        self.i32[(p >> 2) + 1] = 0x80000000;\n        const arr = ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.toArray(v, 0x100000000);\n        for (let i = 0; i < self.n32; i++) {\n            const idx = arr.length - 1 - i;\n\n            if (idx >= 0) {\n                self.i32[(p >> 2) + 2 + i] = arr[idx];\n            } else {\n                self.i32[(p >> 2) + 2 + i] = 0;\n            }\n        }\n    }\n}\n\nclass WitnessCalculatorCircom2 {\n    constructor(instance, sanityCheck) {\n        this.instance = instance;\n\n        this.version = this.instance.exports.getVersion();\n        this.n32 = this.instance.exports.getFieldNumLen32();\n\n        this.instance.exports.getRawPrime();\n        const arr = new Uint32Array(this.n32);\n        for (let i = 0; i < this.n32; i++) {\n            arr[this.n32 - 1 - i] = this.instance.exports.readSharedRWMemory(i);\n        }\n        this.prime = ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromArray(arr, 0x100000000);\n\n        this.witnessSize = this.instance.exports.getWitnessSize();\n\n        this.sanityCheck = sanityCheck;\n    }\n\n    circom_version() {\n        return this.instance.exports.getVersion();\n    }\n\n    async _doCalculateWitness(input, sanityCheck) {\n        //input is assumed to be a map from signals to arrays of bigints\n        this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);\n        const keys = Object.keys(input);\n        let input_counter = 0;\n        keys.forEach((k) => {\n            const h = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.fnvHash)(k);\n            const hMSB = parseInt(h.slice(0, 8), 16);\n            const hLSB = parseInt(h.slice(8, 16), 16);\n            const fArr = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatArray)(input[k]);\n            // Slight deviation from https://github.com/iden3/circom/blob/v2.1.6/code_producers/src/wasm_elements/common/witness_calculator.js\n            // because I don't know when this exported function was added\n            if (typeof this.instance.exports.getInputSignalSize === \"function\") {\n                let signalSize = this.instance.exports.getInputSignalSize(hMSB, hLSB);\n                if (signalSize < 0) {\n                    throw new Error(`Signal ${k} not found\\n`);\n                }\n                if (fArr.length < signalSize) {\n                    throw new Error(`Not enough values for input signal ${k}\\n`);\n                }\n                if (fArr.length > signalSize) {\n                    throw new Error(`Too many values for input signal ${k}\\n`);\n                }\n            }\n            for (let i = 0; i < fArr.length; i++) {\n                const arrFr = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray32)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.normalize)(fArr[i], this.prime), this.n32);\n                for (let j = 0; j < this.n32; j++) {\n                    this.instance.exports.writeSharedRWMemory(j, arrFr[this.n32 - 1 - j]);\n                }\n                try {\n                    this.instance.exports.setInputSignal(hMSB, hLSB, i);\n                    input_counter++;\n                } catch (err) {\n                    // console.log(`After adding signal ${i} of ${k}`)\n                    throw new Error(err);\n                }\n            }\n\n        });\n        if (input_counter < this.instance.exports.getInputSize()) {\n            throw new Error(`Not all inputs have been set. Only ${input_counter} out of ${this.instance.exports.getInputSize()}`);\n        }\n    }\n\n    async calculateWitness(input, sanityCheck) {\n        const w = [];\n\n        await this._doCalculateWitness(input, sanityCheck);\n\n        for (let i = 0; i < this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n            const arr = new Uint32Array(this.n32);\n            for (let j = 0; j < this.n32; j++) {\n                arr[this.n32 - 1 - j] = this.instance.exports.readSharedRWMemory(j);\n            }\n            w.push(ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromArray(arr, 0x100000000));\n        }\n\n        return w;\n    }\n\n    async calculateWTNSBin(input, sanityCheck) {\n        const buff32 = new Uint32Array(this.witnessSize * this.n32 + this.n32 + 11);\n        const buff = new Uint8Array(buff32.buffer);\n        await this._doCalculateWitness(input, sanityCheck);\n\n        //\"wtns\"\n        buff[0] = \"w\".charCodeAt(0);\n        buff[1] = \"t\".charCodeAt(0);\n        buff[2] = \"n\".charCodeAt(0);\n        buff[3] = \"s\".charCodeAt(0);\n\n        //version 2\n        buff32[1] = 2;\n\n        //number of sections: 2\n        buff32[2] = 2;\n\n        //id section 1\n        buff32[3] = 1;\n\n        const n8 = this.n32 * 4;\n        //id section 1 length in 64bytes\n        const idSection1length = 8 + n8;\n        const idSection1lengthHex = idSection1length.toString(16);\n        buff32[4] = parseInt(idSection1lengthHex.slice(0, 8), 16);\n        buff32[5] = parseInt(idSection1lengthHex.slice(8, 16), 16);\n\n        //this.n32\n        buff32[6] = n8;\n\n        //prime number\n        this.instance.exports.getRawPrime();\n\n        let pos = 7;\n        for (let j = 0; j < this.n32; j++) {\n            buff32[pos + j] = this.instance.exports.readSharedRWMemory(j);\n        }\n        pos += this.n32;\n\n        // witness size\n        buff32[pos] = this.witnessSize;\n        pos++;\n\n        //id section 2\n        buff32[pos] = 2;\n        pos++;\n\n        // section 2 length\n        const idSection2length = n8 * this.witnessSize;\n        const idSection2lengthHex = idSection2length.toString(16);\n        buff32[pos] = parseInt(idSection2lengthHex.slice(0, 8), 16);\n        buff32[pos + 1] = parseInt(idSection2lengthHex.slice(8, 16), 16);\n\n        pos += 2;\n        for (let i = 0; i < this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n            for (let j = 0; j < this.n32; j++) {\n                buff32[pos + j] = this.instance.exports.readSharedRWMemory(j);\n            }\n            pos += this.n32;\n        }\n\n        return buff;\n    }\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/circom_runtime/js/witness_calculator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/circom_runtime/main.js":
/*!*********************************************!*\
  !*** ./node_modules/circom_runtime/main.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WitnessCalculatorBuilder: () => (/* reexport safe */ _js_witness_calculator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _js_witness_calculator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/witness_calculator.js */ \"(ssr)/./node_modules/circom_runtime/js/witness_calculator.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lyY29tX3J1bnRpbWUvbWFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvY2lyY29tX3J1bnRpbWUvbWFpbi5qcz8wYTZjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgV2l0bmVzc0NhbGN1bGF0b3JCdWlsZGVyIH0gZnJvbSBcIi4vanMvd2l0bmVzc19jYWxjdWxhdG9yLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/circom_runtime/main.js\n");

/***/ })

};
;